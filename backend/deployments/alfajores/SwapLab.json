{
  "address": "0xC3D1c67764D8e6A6C367C8969982c07bCaeA50d0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supportedAsset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AssetIsSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ContractAddressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balThis",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balToRec",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFund",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnSupportedAsset",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_supportedAssets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimSwapValues",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "swapFees",
          "type": "uint256[]"
        }
      ],
      "name": "setNewAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "swapERC20ForCelo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bef6ef8d418b890d060aaa5e7026776d1dc7ac24e1a4dbbd2e9ede5ac3309d1",
  "receipt": {
    "to": null,
    "from": "0x85AbBd0605F9C725a1af6CA4Fb1fD4dC14dBD669",
    "contractAddress": "0xC3D1c67764D8e6A6C367C8969982c07bCaeA50d0",
    "transactionIndex": 1,
    "gasUsed": "1003772",
    "logsBloom": "0x
    "blockHash": "0x650ffd8c7e379e9ea99a53430787c6fd4fcb4a7ff2808c33d48d5cdf5da44dd1",
    "transactionHash": "0x5bef6ef8d418b890d060aaa5e7026776d1dc7ac24e1a4dbbd2e9ede5ac3309d1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16346542,
        "transactionHash": "0x5bef6ef8d418b890d060aaa5e7026776d1dc7ac24e1a4dbbd2e9ede5ac3309d1",
        "address": "0xC3D1c67764D8e6A6C367C8969982c07bCaeA50d0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000085abbd0605f9c725a1af6ca4fb1fd4dc14dbd669"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x650ffd8c7e379e9ea99a53430787c6fd4fcb4a7ff2808c33d48d5cdf5da44dd1"
      }
    ],
    "blockNumber": 16346542,
    "cumulativeGasUsed": "1160673",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc0280e91e413074da7F9824391387b08288F9286"
  ],
  "numDeployments": 2,
  "solcInputHash": "0c05632738454c17039d7ba88a6e10dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supportedAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AssetIsSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balToRec\",\"type\":\"uint256\"}],\"name\":\"InsufficientFund\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnSupportedAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimSwapValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"swapFees\",\"type\":\"uint256[]\"}],\"name\":\"setNewAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"swapERC20ForCelo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Swap ERC20 for $CELO Anyone can be become a Celo or cUSD provider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapLab.sol\":\"SwapLab\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SwapLab.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**@title Swap ERC20 for $CELO\\r\\n * Anyone can be become a Celo or cUSD provider\\r\\n */\\r\\ncontract SwapLab is Ownable, ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  error UnSupportedAsset(address);\\r\\n  error AssetIsSupported(address);\\r\\n  error InsufficientFund(uint balThis, uint balToRec);\\r\\n  error ContractAddressNotAllowed(address);\\r\\n\\r\\n  struct SupportedAsset {\\r\\n    bool isSupported;\\r\\n    uint rate;\\r\\n    uint minimumSwapValue;\\r\\n    uint swapFee;\\r\\n  }\\r\\n\\r\\n  mapping(address => SupportedAsset) supportedAssets;\\r\\n\\r\\n  constructor(address _supportedAsset) {\\r\\n    uint minSwapValue = 1 * (10 ** 18);\\r\\n    address[] memory sAsset = new address[](1);\\r\\n    uint[] memory rates = new uint[](1);\\r\\n    uint[] memory minSwapValues = new uint[](1);\\r\\n    uint[] memory swapFees = new uint[](1);\\r\\n    sAsset[0] = _supportedAsset;\\r\\n    rates[0] = 1e18 wei;\\r\\n    minSwapValues[0] = minSwapValue;\\r\\n    swapFees[0] = 1e16 wei;\\r\\n\\r\\n    _setNewAsset(\\r\\n      sAsset, \\r\\n      rates,\\r\\n      minSwapValues, \\r\\n      swapFees\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _setNewAsset(\\r\\n    address[] memory _supportedAssets, \\r\\n    uint[] memory rates,\\r\\n    uint[] memory minimSwapValues,\\r\\n    uint[] memory swapFees\\r\\n  ) private {\\r\\n    // if(supportedAssets[newAsset].isSupported) revert AssetIsSupported(newAsset);\\r\\n    require(\\r\\n      _supportedAssets.length == rates.length && rates.length == minimSwapValues.length && minimSwapValues.length == swapFees.length, \\r\\n      \\\"Length mismatch\\\");\\r\\n        for (uint i = 0; i < _supportedAssets.length; i++) {\\r\\n      supportedAssets[_supportedAssets[i]] = SupportedAsset(\\r\\n        true,\\r\\n        rates[i],\\r\\n        minimSwapValues[i],\\r\\n        swapFees[i]\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setNewAsset(    \\r\\n    address[] memory _supportedAssets, \\r\\n    uint[] memory rates,\\r\\n    uint[] memory minimSwapValues,\\r\\n    uint[] memory swapFees \\r\\n  ) public onlyOwner {\\r\\n    _setNewAsset(_supportedAssets, rates, minimSwapValues, swapFees);\\r\\n  }\\r\\n\\r\\n  function swapERC20ForCelo(address asset) payable public nonReentrant {\\r\\n    SupportedAsset memory sat = supportedAssets[asset];\\r\\n    if(!sat.isSupported) revert UnSupportedAsset(asset);\\r\\n    uint mantissa = 10 ** IERC20Metadata(asset).decimals();\\r\\n    if(Address.isContract(msg.sender)) revert ContractAddressNotAllowed(msg.sender);\\r\\n    uint amountToSwap = IERC20(asset).allowance(msg.sender, address(this));\\r\\n    require(amountToSwap >= sat.minimumSwapValue, \\\"Insufficient allowance\\\");\\r\\n    uint amountCeloToReceive = amountToSwap.mul(sat.rate).div(mantissa).sub(sat.swapFee);\\r\\n    uint bal = address(this).balance;\\r\\n    if(amountCeloToReceive > bal) revert InsufficientFund(bal, amountCeloToReceive);\\r\\n    require(IERC20(asset).transferFrom(msg.sender, owner(), amountToSwap), \\\"Failed\\\");\\r\\n    (bool sent, ) = address(msg.sender).call{value: amountCeloToReceive}('');\\r\\n    require(sent, 'Anomally detected');\\r\\n  }\\r\\n\\r\\n  function deposit() payable public {\\r\\n    require(msg.value > 0,\\\"Thank you\\\");\\r\\n  }\\r\\n\\r\\n  function withdraw(address to, uint amount) public onlyOwner {\\r\\n    require(to != address(0), 'Zero recipient');\\r\\n    (bool done,) = to.call{value: amount}('');\\r\\n    require(done, 'Failed');\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x94df1cb3556c0bc752240370e618afb5b340b3d0dcf4e090ca5270b745f3ba52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001307380380620013078339810160408190526200003491620003af565b6200005a6200004b640100000000620001c4810204565b640100000000620001c8810204565b600180805560408051828152808201909152670de0b6b3a764000091600091906020808301908036833750506040805160018082528183019092529293506000929150602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905085846000815181106200010a576200010a620003e1565b6020026020010190600160a060020a03169081600160a060020a031681525050670de0b6b3a764000083600081518110620001495762000149620003e1565b60200260200101818152505084826000815181106200016c576200016c620003e1565b602002602001018181525050662386f26fc1000081600081518110620001965762000196620003e1565b6020908102919091010152620001b88484848464010000000062000218810204565b50505050505062000451565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b825184511480156200022b575081518351145b801562000239575080518251145b620002a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4c656e677468206d69736d617463680000000000000000000000000000000000604482015260640160405180910390fd5b60005b8451811015620003a8576040518060800160405280600115158152602001858381518110620002da57620002da620003e1565b60200260200101518152602001848381518110620002fc57620002fc620003e1565b602002602001015181526020018383815181106200031e576200031e620003e1565b602002602001015181525060026000878481518110620003425762000342620003e1565b602090810291909101810151600160a060020a031682528181019290925260409081016000208351815460ff19169015151781559183015160018301558201516002820155606090910151600390910155806200039f8162000410565b915050620002a7565b5050505050565b600060208284031215620003c257600080fd5b8151600160a060020a0381168114620003da57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000600182016200044a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b610ea680620004616000396000f3fe6080604052600436106100745760003560e060020a90048063ace8fddf11610052578063ace8fddf146100cf578063d0e30db0146100ef578063f2fde38b146100f7578063f3fef3a31461011757600080fd5b8063445400bb14610079578063715018a61461008e5780638da5cb5b146100a3575b600080fd5b61008c610087366004610a5a565b610137565b005b34801561009a57600080fd5b5061008c610575565b3480156100af57600080fd5b5060005460408051600160a060020a039092168252519081900360200190f35b3480156100db57600080fd5b5061008c6100ea366004610b4b565b610589565b61008c6105a3565b34801561010357600080fd5b5061008c610112366004610a5a565b6105f6565b34801561012357600080fd5b5061008c610132366004610c51565b610686565b61013f610792565b600160a060020a0381166000908152600260208181526040928390208351608081018552815460ff16151580825260018301549382019390935292810154938301939093526003909201546060820152906101d6576040517f3c4df43a000000000000000000000000000000000000000000000000000000008152600160a060020a03831660048201526024015b60405180910390fd5b600082600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610c7b565b61024890600a610da5565b9050333b15610285576040517ff4ccbd1e0000000000000000000000000000000000000000000000000000000081523360048201526024016101cd565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152600090600160a060020a0385169063dd62ed3e90604401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610db4565b905082604001518110156103685760405160e560020a62461bcd02815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e63650000000000000000000060448201526064016101cd565b600061039984606001516103938561038d8860200151876107ee90919063ffffffff16565b90610803565b9061080f565b90503031808211156103e1576040517f9b0f01da00000000000000000000000000000000000000000000000000000000815260048101829052602481018390526044016101cd565b85600160a060020a03166323b872dd33610403600054600160a060020a031690565b60405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604481018690526064016020604051808303816000875af1158015610455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104799190610dcd565b6104c85760405160e560020a62461bcd02815260206004820152600660248201527f4661696c6564000000000000000000000000000000000000000000000000000060448201526064016101cd565b604051600090339084908381818185875af1925050503d806000811461050a576040519150601f19603f3d011682016040523d82523d6000602084013e61050f565b606091505b50509050806105635760405160e560020a62461bcd02815260206004820152601160248201527f416e6f6d616c6c7920646574656374656400000000000000000000000000000060448201526064016101cd565b50505050505061057260018055565b50565b61057d61081b565b6105876000610878565b565b61059161081b565b61059d848484846108d5565b50505050565b600034116105875760405160e560020a62461bcd02815260206004820152600960248201527f5468616e6b20796f75000000000000000000000000000000000000000000000060448201526064016101cd565b6105fe61081b565b600160a060020a03811661067d5760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101cd565b61057281610878565b61068e61081b565b600160a060020a0382166106e75760405160e560020a62461bcd02815260206004820152600e60248201527f5a65726f20726563697069656e7400000000000000000000000000000000000060448201526064016101cd565b600082600160a060020a03168260405160006040518083038185875af1925050503d8060008114610734576040519150601f19603f3d011682016040523d82523d6000602084013e610739565b606091505b505090508061078d5760405160e560020a62461bcd02815260206004820152600660248201527f4661696c6564000000000000000000000000000000000000000000000000000060448201526064016101cd565b505050565b6002600154036107e75760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101cd565b6002600155565b60006107fa8284610def565b90505b92915050565b60006107fa8284610e06565b60006107fa8284610e2b565b600054600160a060020a031633146105875760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101cd565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b825184511480156108e7575081518351145b80156108f4575080518251145b6109435760405160e560020a62461bcd02815260206004820152600f60248201527f4c656e677468206d69736d61746368000000000000000000000000000000000060448201526064016101cd565b60005b8451811015610a3757604051806080016040528060011515815260200185838151811061097557610975610e3e565b6020026020010151815260200184838151811061099457610994610e3e565b602002602001015181526020018383815181106109b3576109b3610e3e565b6020026020010151815250600260008784815181106109d4576109d4610e3e565b602090810291909101810151600160a060020a031682528181019290925260409081016000208351815460ff1916901515178155918301516001830155820151600282015560609091015160039091015580610a2f81610e57565b915050610946565b5050505050565b8035600160a060020a0381168114610a5557600080fd5b919050565b600060208284031215610a6c57600080fd5b6107fa82610a3e565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ab757610ab7610a75565b604052919050565b600067ffffffffffffffff821115610ad957610ad9610a75565b5060209081020190565b600082601f830112610af457600080fd5b81356020610b09610b0483610abf565b610a8e565b82815291810284018101918181019086841115610b2557600080fd5b8286015b84811015610b405780358352918301918301610b29565b509695505050505050565b60008060008060808587031215610b6157600080fd5b843567ffffffffffffffff80821115610b7957600080fd5b818701915087601f830112610b8d57600080fd5b81356020610b9d610b0483610abf565b8281529181028401810191818101908b841115610bb957600080fd5b948201945b83861015610bde57610bcf86610a3e565b82529482019490820190610bbe565b98505088013592505080821115610bf457600080fd5b610c0088838901610ae3565b94506040870135915080821115610c1657600080fd5b610c2288838901610ae3565b93506060870135915080821115610c3857600080fd5b50610c4587828801610ae3565b91505092959194509250565b60008060408385031215610c6457600080fd5b610c6d83610a3e565b946020939093013593505050565b600060208284031215610c8d57600080fd5b815160ff81168114610c9e57600080fd5b9392505050565b60e060020a634e487b7102600052601160045260246000fd5b600181815b80851115610cfb578160001904821115610cdf57610cdf610ca5565b80851615610cec57918102915b60029094049390800290610cc3565b509250929050565b600082610d12575060016107fd565b81610d1f575060006107fd565b8160018114610d355760028114610d3f57610d5c565b60019150506107fd565b60ff841115610d5057610d50610ca5565b8360020a9150506107fd565b5060208310610133831016604e8410600b8410161715610d7f575081810a6107fd565b610d898383610cbe565b8060001904821115610d9d57610d9d610ca5565b029392505050565b60006107fa60ff841683610d03565b600060208284031215610dc657600080fd5b5051919050565b600060208284031215610ddf57600080fd5b81518015158114610c9e57600080fd5b80820281158282048414176107fd576107fd610ca5565b600082610e265760e060020a634e487b7102600052601260045260246000fd5b500490565b818103818111156107fd576107fd610ca5565b60e060020a634e487b7102600052603260045260246000fd5b600060018201610e6957610e69610ca5565b506001019056fea26469706673582212205b9fcba3dfabb6eca3776c11f3a0de2178f2e307d2a3d8c569196644c19da8a164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e060020a90048063ace8fddf11610052578063ace8fddf146100cf578063d0e30db0146100ef578063f2fde38b146100f7578063f3fef3a31461011757600080fd5b8063445400bb14610079578063715018a61461008e5780638da5cb5b146100a3575b600080fd5b61008c610087366004610a5a565b610137565b005b34801561009a57600080fd5b5061008c610575565b3480156100af57600080fd5b5060005460408051600160a060020a039092168252519081900360200190f35b3480156100db57600080fd5b5061008c6100ea366004610b4b565b610589565b61008c6105a3565b34801561010357600080fd5b5061008c610112366004610a5a565b6105f6565b34801561012357600080fd5b5061008c610132366004610c51565b610686565b61013f610792565b600160a060020a0381166000908152600260208181526040928390208351608081018552815460ff16151580825260018301549382019390935292810154938301939093526003909201546060820152906101d6576040517f3c4df43a000000000000000000000000000000000000000000000000000000008152600160a060020a03831660048201526024015b60405180910390fd5b600082600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610c7b565b61024890600a610da5565b9050333b15610285576040517ff4ccbd1e0000000000000000000000000000000000000000000000000000000081523360048201526024016101cd565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152600090600160a060020a0385169063dd62ed3e90604401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610db4565b905082604001518110156103685760405160e560020a62461bcd02815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e63650000000000000000000060448201526064016101cd565b600061039984606001516103938561038d8860200151876107ee90919063ffffffff16565b90610803565b9061080f565b90503031808211156103e1576040517f9b0f01da00000000000000000000000000000000000000000000000000000000815260048101829052602481018390526044016101cd565b85600160a060020a03166323b872dd33610403600054600160a060020a031690565b60405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604481018690526064016020604051808303816000875af1158015610455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104799190610dcd565b6104c85760405160e560020a62461bcd02815260206004820152600660248201527f4661696c6564000000000000000000000000000000000000000000000000000060448201526064016101cd565b604051600090339084908381818185875af1925050503d806000811461050a576040519150601f19603f3d011682016040523d82523d6000602084013e61050f565b606091505b50509050806105635760405160e560020a62461bcd02815260206004820152601160248201527f416e6f6d616c6c7920646574656374656400000000000000000000000000000060448201526064016101cd565b50505050505061057260018055565b50565b61057d61081b565b6105876000610878565b565b61059161081b565b61059d848484846108d5565b50505050565b600034116105875760405160e560020a62461bcd02815260206004820152600960248201527f5468616e6b20796f75000000000000000000000000000000000000000000000060448201526064016101cd565b6105fe61081b565b600160a060020a03811661067d5760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101cd565b61057281610878565b61068e61081b565b600160a060020a0382166106e75760405160e560020a62461bcd02815260206004820152600e60248201527f5a65726f20726563697069656e7400000000000000000000000000000000000060448201526064016101cd565b600082600160a060020a03168260405160006040518083038185875af1925050503d8060008114610734576040519150601f19603f3d011682016040523d82523d6000602084013e610739565b606091505b505090508061078d5760405160e560020a62461bcd02815260206004820152600660248201527f4661696c6564000000000000000000000000000000000000000000000000000060448201526064016101cd565b505050565b6002600154036107e75760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101cd565b6002600155565b60006107fa8284610def565b90505b92915050565b60006107fa8284610e06565b60006107fa8284610e2b565b600054600160a060020a031633146105875760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101cd565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b825184511480156108e7575081518351145b80156108f4575080518251145b6109435760405160e560020a62461bcd02815260206004820152600f60248201527f4c656e677468206d69736d61746368000000000000000000000000000000000060448201526064016101cd565b60005b8451811015610a3757604051806080016040528060011515815260200185838151811061097557610975610e3e565b6020026020010151815260200184838151811061099457610994610e3e565b602002602001015181526020018383815181106109b3576109b3610e3e565b6020026020010151815250600260008784815181106109d4576109d4610e3e565b602090810291909101810151600160a060020a031682528181019290925260409081016000208351815460ff1916901515178155918301516001830155820151600282015560609091015160039091015580610a2f81610e57565b915050610946565b5050505050565b8035600160a060020a0381168114610a5557600080fd5b919050565b600060208284031215610a6c57600080fd5b6107fa82610a3e565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ab757610ab7610a75565b604052919050565b600067ffffffffffffffff821115610ad957610ad9610a75565b5060209081020190565b600082601f830112610af457600080fd5b81356020610b09610b0483610abf565b610a8e565b82815291810284018101918181019086841115610b2557600080fd5b8286015b84811015610b405780358352918301918301610b29565b509695505050505050565b60008060008060808587031215610b6157600080fd5b843567ffffffffffffffff80821115610b7957600080fd5b818701915087601f830112610b8d57600080fd5b81356020610b9d610b0483610abf565b8281529181028401810191818101908b841115610bb957600080fd5b948201945b83861015610bde57610bcf86610a3e565b82529482019490820190610bbe565b98505088013592505080821115610bf457600080fd5b610c0088838901610ae3565b94506040870135915080821115610c1657600080fd5b610c2288838901610ae3565b93506060870135915080821115610c3857600080fd5b50610c4587828801610ae3565b91505092959194509250565b60008060408385031215610c6457600080fd5b610c6d83610a3e565b946020939093013593505050565b600060208284031215610c8d57600080fd5b815160ff81168114610c9e57600080fd5b9392505050565b60e060020a634e487b7102600052601160045260246000fd5b600181815b80851115610cfb578160001904821115610cdf57610cdf610ca5565b80851615610cec57918102915b60029094049390800290610cc3565b509250929050565b600082610d12575060016107fd565b81610d1f575060006107fd565b8160018114610d355760028114610d3f57610d5c565b60019150506107fd565b60ff841115610d5057610d50610ca5565b8360020a9150506107fd565b5060208310610133831016604e8410600b8410161715610d7f575081810a6107fd565b610d898383610cbe565b8060001904821115610d9d57610d9d610ca5565b029392505050565b60006107fa60ff841683610d03565b600060208284031215610dc657600080fd5b5051919050565b600060208284031215610ddf57600080fd5b81518015158114610c9e57600080fd5b80820281158282048414176107fd576107fd610ca5565b600082610e265760e060020a634e487b7102600052601260045260246000fd5b500490565b818103818111156107fd576107fd610ca5565b60e060020a634e487b7102600052603260045260246000fd5b600060018201610e6957610e69610ca5565b506001019056fea26469706673582212205b9fcba3dfabb6eca3776c11f3a0de2178f2e307d2a3d8c569196644c19da8a164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Swap ERC20 for $CELO Anyone can be become a Celo or cUSD provider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 984,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "supportedAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(SupportedAsset)979_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(SupportedAsset)979_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SwapLab.SupportedAsset)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportedAsset)979_storage"
      },
      "t_struct(SupportedAsset)979_storage": {
        "encoding": "inplace",
        "label": "struct SwapLab.SupportedAsset",
        "members": [
          {
            "astId": 972,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 974,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 976,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "minimumSwapValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 978,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "swapFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}