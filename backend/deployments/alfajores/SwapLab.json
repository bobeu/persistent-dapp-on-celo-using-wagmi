{
  "address": "0x3eD5E8ffc30Fa6e17Cb9b021865B9a61b8ec2169",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supportedAsset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "AssetIsSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ContractAddressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balThis",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balToRec",
          "type": "uint256"
        }
      ],
      "name": "InsufficientLiquidyInContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UnSupportedAsset",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_swapfee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalFeeReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalProvider",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeProvided",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "position",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isExist",
              "type": "bool"
            }
          ],
          "internalType": "struct SwapLab.Provider",
          "name": "_provider",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liqProviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeProvided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "providersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_supportedAssets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        }
      ],
      "name": "setNewAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "swapERC20ForCelo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapfee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProvider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x646c8fb2c2c50729187cb5fd62e727a71336647a39736573be561d03b6d74a35",
  "receipt": {
    "to": null,
    "from": "0x85AbBd0605F9C725a1af6CA4Fb1fD4dC14dBD669",
    "contractAddress": "0x3eD5E8ffc30Fa6e17Cb9b021865B9a61b8ec2169",
    "transactionIndex": 0,
    "gasUsed": "1370608",
    "logsBloom": "0x
    "blockHash": "0x8848955c520115433cc8199fea9e2c6d32a9b5fd47c147ce6505a289cb2d48bf",
    "transactionHash": "0x646c8fb2c2c50729187cb5fd62e727a71336647a39736573be561d03b6d74a35",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16383246,
        "transactionHash": "0x646c8fb2c2c50729187cb5fd62e727a71336647a39736573be561d03b6d74a35",
        "address": "0x3eD5E8ffc30Fa6e17Cb9b021865B9a61b8ec2169",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000085abbd0605f9c725a1af6ca4fb1fd4dc14dbd669"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8848955c520115433cc8199fea9e2c6d32a9b5fd47c147ce6505a289cb2d48bf"
      }
    ],
    "blockNumber": 16383246,
    "cumulativeGasUsed": "1370608",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42cf7137f486783Fc3f19Fae7B52F06adef9fFd6"
  ],
  "numDeployments": 6,
  "solcInputHash": "25b81046a75083775c822be3e1da2e81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supportedAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AssetIsSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balToRec\",\"type\":\"uint256\"}],\"name\":\"InsufficientLiquidyInContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UnSupportedAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFeeReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalProvider\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"internalType\":\"struct SwapLab.Provider\",\"name\":\"_provider\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"name\":\"setNewAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"swapERC20ForCelo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity()\":{\"details\":\"We try to be fair with those that have previous liquidity in the pool by backdating the time liquidity was provided.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity()\":{\"details\":\" If provider has no liquidity balance left in the pool, their provided time is reset.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"splitFee()\":{\"details\":\" Anyone can call this function to split fee among the providers.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Swap ERC20 for $CELO Anyone can be become a Celo or cUSD provider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapLab.sol\":\"SwapLab\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SwapLab.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**@title Swap ERC20 for $CELO\\r\\n * Anyone can be become a Celo or cUSD provider\\r\\n */\\r\\ncontract SwapLab is Ownable, ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  error UnSupportedAsset(address);\\r\\n  error AssetIsSupported(address);\\r\\n  error InsufficientLiquidyInContract(uint balThis, uint balToRec);\\r\\n  error ContractAddressNotAllowed(address);\\r\\n\\r\\n  uint public totalLiquidity;\\r\\n  uint public totalFeeReceived;\\r\\n  uint public totalProvider;\\r\\n  uint public swapfee;\\r\\n\\r\\n  struct SupportedAsset {\\r\\n    bool isSupported;\\r\\n    uint rate;\\r\\n  }\\r\\n\\r\\n  struct Provider {\\r\\n    uint amount;\\r\\n    uint timeProvided;\\r\\n    uint position;\\r\\n    bool isExist;\\r\\n  }\\r\\n\\r\\n  address[] public providersAddress;\\r\\n\\r\\n  mapping(address => SupportedAsset) public supportedAssets;\\r\\n  mapping(address => Provider) public liqProviders;\\r\\n\\r\\n  modifier onlyEOA() {\\r\\n    if(Address.isContract(msg.sender)) revert ContractAddressNotAllowed(msg.sender);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isProvider() {\\r\\n    require(liqProviders[msg.sender].amount > 0, \\\"Not a provider\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _supportedAsset) {\\r\\n    address[] memory sAsset = new address[](1);\\r\\n    uint[] memory rates = new uint[](1);\\r\\n    sAsset[0] = _supportedAsset;\\r\\n    rates[0] = 50 * (10 ** 18);\\r\\n    swapfee = 1e17 wei;\\r\\n    providersAddress.push(msg.sender);\\r\\n\\r\\n    _setNewAsset(\\r\\n      sAsset, \\r\\n      rates\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _setNewAsset(\\r\\n    address[] memory _supportedAssets, \\r\\n    uint[] memory rates\\r\\n  ) private {\\r\\n    require(\\r\\n      _supportedAssets.length == rates.length, \\r\\n      \\\"Length mismatch\\\");\\r\\n    for (uint i = 0; i < _supportedAssets.length; i++) {\\r\\n      supportedAssets[_supportedAssets[i]] = SupportedAsset(\\r\\n        true,\\r\\n        rates[i]\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setNewAsset(    \\r\\n    address[] memory _supportedAssets, \\r\\n    uint[] memory rates\\r\\n  ) public onlyOwner {\\r\\n    _setNewAsset(_supportedAssets, rates);\\r\\n  }\\r\\n\\r\\n  function swapERC20ForCelo(address asset) payable public onlyEOA nonReentrant {\\r\\n    SupportedAsset memory sat = supportedAssets[asset];\\r\\n    if(!sat.isSupported) revert UnSupportedAsset(asset);\\r\\n    uint mantissa = 10 ** 18;\\r\\n    uint amountToSwap = IERC20(asset).allowance(msg.sender, address(this));\\r\\n    require(amountToSwap > mantissa && amountToSwap.div(mantissa).mod(100) == 0, \\\"Invalid token request\\\");\\r\\n    uint fee = swapfee;\\r\\n    require(msg.value >= fee, \\\"Insufficient value to pay swap fee\\\");\\r\\n    uint valInCelo = amountToSwap.div(mantissa).mul(1e9 wei);\\r\\n    if(valInCelo > totalLiquidity) revert InsufficientLiquidyInContract(totalLiquidity, valInCelo);\\r\\n    totalFeeReceived = totalFeeReceived.add(fee);\\r\\n    totalLiquidity = totalLiquidity.sub(valInCelo);\\r\\n    require(IERC20(asset).transferFrom(msg.sender, owner(), amountToSwap), \\\"Failed\\\");\\r\\n    Address.sendValue(payable(msg.sender), valInCelo);\\r\\n  }\\r\\n\\r\\n  /**@dev\\r\\n   * We try to be fair with those that have previous liquidity in the pool\\r\\n   * by backdating the time liquidity was provided.\\r\\n   */\\r\\n  function addLiquidity() public payable onlyEOA {\\r\\n    require(msg.value > 0,\\\"Insufficient value\\\");\\r\\n    Provider memory prov = liqProviders[msg.sender];\\r\\n    uint position = prov.position;\\r\\n    if(prov.isExist == false) {\\r\\n      position = providersAddress.length;\\r\\n      totalProvider ++;\\r\\n      providersAddress.push(msg.sender);\\r\\n    } else {\\r\\n      if(providersAddress[position] == address(0)) {\\r\\n        providersAddress[position] = msg.sender;\\r\\n      }\\r\\n    }\\r\\n    liqProviders[msg.sender] = Provider(\\r\\n      prov.amount.add(msg.value),\\r\\n      prov.timeProvided > 0 ? _now().sub(prov.timeProvided).div(2).add(prov.timeProvided) : _now(),\\r\\n      position,\\r\\n      true\\r\\n    );\\r\\n\\r\\n    totalLiquidity = totalLiquidity.add(msg.value);\\r\\n  }\\r\\n\\r\\n  /**@dev \\r\\n   * If provider has no liquidity balance left in the pool, their\\r\\n   * provided time is reset.\\r\\n   */\\r\\n  function removeLiquidity() public onlyEOA isProvider nonReentrant {\\r\\n    Provider memory prov = liqProviders[msg.sender];\\r\\n    liqProviders[msg.sender] = Provider(\\r\\n      0, \\r\\n      0,\\r\\n      prov.position,\\r\\n      prov.isExist\\r\\n    );\\r\\n    totalProvider --;\\r\\n    totalLiquidity = totalLiquidity.sub(prov.amount); \\r\\n    uint amtToRec = prov.amount;\\r\\n    providersAddress[prov.position] = address(0);\\r\\n    if(address(this).balance < prov.amount) amtToRec = address(this).balance;\\r\\n    Address.sendValue(payable(msg.sender), amtToRec);\\r\\n  }\\r\\n\\r\\n  function _now() internal view returns(uint) {\\r\\n    return block.timestamp;\\r\\n  }\\r\\n\\r\\n  /**@dev \\r\\n   * Anyone can call this function to split fee among the providers.\\r\\n   */\\r\\n  function splitFee() public onlyEOA isProvider nonReentrant {\\r\\n    uint availableFee = totalFeeReceived;\\r\\n    require(availableFee > 0, \\\"Fee cannot be split at this time\\\");\\r\\n    totalFeeReceived = 0;\\r\\n    uint providers = providersAddress.length;\\r\\n    uint each = availableFee.div(providers);\\r\\n    for(uint i = 0; i < providers; i++) {\\r\\n      address to = providersAddress[i];\\r\\n      if(to != address(0)) {\\r\\n        Address.sendValue(payable(to), each);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getData() public view returns(\\r\\n    uint _totalLiquidity,\\r\\n    uint _swapfee,\\r\\n    uint _totalFeeReceived,\\r\\n    uint _totalProvider,\\r\\n    Provider memory _provider\\r\\n  ) {\\r\\n    _totalLiquidity = totalLiquidity;\\r\\n    _swapfee = swapfee;\\r\\n    _totalFeeReceived = totalFeeReceived;\\r\\n    _totalProvider = totalProvider;\\r\\n    _provider = liqProviders[msg.sender];\\r\\n\\r\\n    return(\\r\\n      _totalLiquidity,\\r\\n      _swapfee,\\r\\n      _totalFeeReceived,\\r\\n      _totalProvider,\\r\\n      _provider\\r\\n    );\\r\\n  }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xd11ea6ff88d0d5f37a3a93d5ce1afea2c5ce9ead681cc854e8ea18e6c24fc3ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200188f3803806200188f8339810160408190526200003491620002e3565b6200005a6200004b64010000000062000170810204565b64010000000062000174810204565b6001808055604080518281528082019091526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090508282600081518110620000b957620000b962000315565b6020026020010190600160a060020a03169081600160a060020a0316815250506802b5e3af16b188000081600081518110620000f957620000f962000315565b602090810291909101015267016345785d8a0000600555600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018054600160a060020a03191633179055620001678282640100000000620001c4810204565b50505062000385565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182511462000234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4c656e677468206d69736d617463680000000000000000000000000000000000604482015260640160405180910390fd5b60005b8251811015620002de5760405180604001604052806001151581526020018383815181106200026a576200026a62000315565b6020026020010151815250600760008584815181106200028e576200028e62000315565b602090810291909101810151600160a060020a03168252818101929092526040016000208251815460ff191690151517815591015160019091015580620002d58162000344565b91505062000237565b505050565b600060208284031215620002f657600080fd5b8151600160a060020a03811681146200030e57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000600182016200037e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b6114fa80620003956000396000f3fe608060405260043610610110576000357c010000000000000000000000000000000000000000000000000000000090048063715018a6116100a7578063e61d9f0811610076578063e61d9f08146102d7578063e8078d94146102f7578063ee3eb74e146102ff578063f2fde38b1461036657600080fd5b8063715018a61461021f5780638da5cb5b14610234578063bd81579e14610266578063d443e132146102b757600080fd5b8063445400bb116100e3578063445400bb146101ca57806349805555146101df5780635f551387146101f457806367b9a2861461020a57600080fd5b80630784e3501461011557806315770f921461013e57806316834101146101545780633bc5de301461016a575b600080fd5b34801561012157600080fd5b5061012b60055481565b6040519081526020015b60405180910390f35b34801561014a57600080fd5b5061012b60025481565b34801561016057600080fd5b5061012b60045481565b34801561017657600080fd5b5061017f610386565b6040805195865260208087019590955285810193909352606080860192909252805160808601529283015160a08501529082015160c08401520151151560e082015261010001610135565b6101dd6101d83660046111db565b61041b565b005b3480156101eb57600080fd5b506101dd6107ec565b34801561020057600080fd5b5061012b60035481565b34801561021657600080fd5b506101dd61094b565b34801561022b57600080fd5b506101dd610b00565b34801561024057600080fd5b50600054600160a060020a03165b604051600160a060020a039091168152602001610135565b34801561027257600080fd5b506102a06102813660046111db565b6007602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610135565b3480156102c357600080fd5b506101dd6102d23660046112cc565b610b12565b3480156102e357600080fd5b5061024e6102f2366004611389565b610b28565b6101dd610b52565b34801561030b57600080fd5b5061034461031a3660046111db565b60086020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610135565b34801561037257600080fd5b506101dd6103813660046111db565b610dbb565b6000806000806103b960405180608001604052806000815260200160008152602001600081526020016000151581525090565b50506002805460055460038054600454336000908152600860209081526040918290208251608081018452815481526001820154928101929092529788015491810191909152959092015460ff16151560608601529297919650919450909250565b333b156104455760405160e160020a637a665e8f0281523360048201526024015b60405180910390fd5b61044d610e4b565b600160a060020a0381166000908152600760209081526040918290208251808401909352805460ff161515808452600190910154918301919091526104c9576040517f3c4df43a000000000000000000000000000000000000000000000000000000008152600160a060020a038316600482015260240161043c565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152670de0b6b3a764000090600090600160a060020a0385169063dd62ed3e90604401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d91906113a2565b90508181118015610580575061057e60646105788385610ea7565b90610ebc565b155b6105cf5760405160e560020a62461bcd02815260206004820152601560248201527f496e76616c696420746f6b656e20726571756573740000000000000000000000604482015260640161043c565b6005543481111561064b5760405160e560020a62461bcd02815260206004820152602260248201527f496e73756666696369656e742076616c756520746f207061792073776170206660448201527f6565000000000000000000000000000000000000000000000000000000000000606482015260840161043c565b6000610665633b9aca0061065f8587610ea7565b90610ec8565b90506002548111156106b1576002546040517f02f90ce500000000000000000000000000000000000000000000000000000000815260048101919091526024810182905260440161043c565b6003546106be9083610ed4565b6003556002546106ce9082610ee0565b600255600160a060020a0386166323b872dd336106f3600054600160a060020a031690565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a03928316600482015291166024820152604481018690526064016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906113bb565b6107d15760405160e560020a62461bcd02815260206004820152600660248201527f4661696c65640000000000000000000000000000000000000000000000000000604482015260640161043c565b6107db3382610eec565b50505050506107e960018055565b50565b333b156108115760405160e160020a637a665e8f02815233600482015260240161043c565b336000908152600860205260409020546108705760405160e560020a62461bcd02815260206004820152600e60248201527f4e6f7420612070726f7669646572000000000000000000000000000000000000604482015260640161043c565b610878610e4b565b600354806108cb5760405160e560020a62461bcd02815260206004820181905260248201527f4665652063616e6e6f742062652073706c697420617420746869732074696d65604482015260640161043c565b60006003819055600654906108e08383610ea7565b905060005b8281101561093c57600060068281548110610902576109026113e4565b600091825260209091200154600160a060020a031690508015610929576109298184610eec565b508061093481611416565b9150506108e5565b5050505061094960018055565b565b333b156109705760405160e160020a637a665e8f02815233600482015260240161043c565b336000908152600860205260409020546109cf5760405160e560020a62461bcd02815260206004820152600e60248201527f4e6f7420612070726f7669646572000000000000000000000000000000000000604482015260640161043c565b6109d7610e4b565b336000818152600860208181526040808420815160808082018452825482526001830180548387015260028401805484870190815260038601805460ff8116151560608089019182528a519788018b528d8852878c018e815294519a88019a8b52905115159087019081529c8c5299909852925190945590519055915190559351151560ff199092169190911790556004805491610a748361142f565b90915550508051600254610a8791610ee0565b6002558051604082015160068054600092908110610aa757610aa76113e4565b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055815130311015610aeb575030315b610af53382610eec565b505061094960018055565b610b08611011565b610949600061106e565b610b1a611011565b610b2482826110cb565b5050565b60068181548110610b3857600080fd5b600091825260209091200154600160a060020a0316905081565b333b15610b775760405160e160020a637a665e8f02815233600482015260240161043c565b60003411610bca5760405160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742076616c75650000000000000000000000000000604482015260640161043c565b33600090815260086020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460ff16151560608301819052919290919003610c86575060065460048054906000610c2d83611416565b9091555050600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff191633179055610d01565b6000600160a060020a031660068281548110610ca457610ca46113e4565b600091825260209091200154600160a060020a031603610d01573360068281548110610cd257610cd26113e4565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b604080516080810190915282518190610d1a9034610ed4565b81526020016000846020015111610d315742610d55565b6020840151610d5590610d4f6002610d494284610ee0565b90610ea7565b90610ed4565b815260208082018490526001604092830181905233600090815260088352839020845181559184015190820155908201516002808301919091556060909201516003909101805460ff191691151591909117905554610db49034610ed4565b6002555050565b610dc3611011565b600160a060020a038116610e425760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161043c565b6107e98161106e565b600260015403610ea05760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043c565b6002600155565b6000610eb3828461145f565b90505b92915050565b6000610eb38284611473565b6000610eb38284611487565b6000610eb3828461149e565b6000610eb382846114b1565b3031811115610f405760405160e560020a62461bcd02815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161043c565b600082600160a060020a03168260405160006040518083038185875af1925050503d8060008114610f8d576040519150601f19603f3d011682016040523d82523d6000602084013e610f92565b606091505b505090508061100c5760405160e560020a62461bcd02815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161043c565b505050565b600054600160a060020a031633146109495760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043c565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182511461111f5760405160e560020a62461bcd02815260206004820152600f60248201527f4c656e677468206d69736d617463680000000000000000000000000000000000604482015260640161043c565b60005b825181101561100c576040518060400160405280600115158152602001838381518110611151576111516113e4565b602002602001015181525060076000858481518110611172576111726113e4565b602090810291909101810151600160a060020a03168252818101929092526040016000208251815460ff1916901515178155910151600190910155806111b781611416565b915050611122565b8035600160a060020a03811681146111d657600080fd5b919050565b6000602082840312156111ed57600080fd5b610eb3826111bf565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611238576112386111f6565b604052919050565b600067ffffffffffffffff82111561125a5761125a6111f6565b5060209081020190565b600082601f83011261127557600080fd5b8135602061128a61128583611240565b61120f565b828152918102840181019181810190868411156112a657600080fd5b8286015b848110156112c157803583529183019183016112aa565b509695505050505050565b600080604083850312156112df57600080fd5b823567ffffffffffffffff808211156112f757600080fd5b818501915085601f83011261130b57600080fd5b8135602061131b61128583611240565b8281529181028401810191818101908984111561133757600080fd5b948201945b8386101561135c5761134d866111bf565b8252948201949082019061133c565b9650508601359250508082111561137257600080fd5b5061137f85828601611264565b9150509250929050565b60006020828403121561139b57600080fd5b5035919050565b6000602082840312156113b457600080fd5b5051919050565b6000602082840312156113cd57600080fd5b815180151581146113dd57600080fd5b9392505050565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b600060018201611428576114286113fd565b5060010190565b60008161143e5761143e6113fd565b506000190190565b60e060020a634e487b7102600052601260045260246000fd5b60008261146e5761146e611446565b500490565b60008261148257611482611446565b500690565b8082028115828204841417610eb657610eb66113fd565b80820180821115610eb657610eb66113fd565b81810381811115610eb657610eb66113fd56fea264697066735822122022c767e231feee982c045cd3795ec23862da98bab93f30fa6a2910404aa3a89d64736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610610110576000357c010000000000000000000000000000000000000000000000000000000090048063715018a6116100a7578063e61d9f0811610076578063e61d9f08146102d7578063e8078d94146102f7578063ee3eb74e146102ff578063f2fde38b1461036657600080fd5b8063715018a61461021f5780638da5cb5b14610234578063bd81579e14610266578063d443e132146102b757600080fd5b8063445400bb116100e3578063445400bb146101ca57806349805555146101df5780635f551387146101f457806367b9a2861461020a57600080fd5b80630784e3501461011557806315770f921461013e57806316834101146101545780633bc5de301461016a575b600080fd5b34801561012157600080fd5b5061012b60055481565b6040519081526020015b60405180910390f35b34801561014a57600080fd5b5061012b60025481565b34801561016057600080fd5b5061012b60045481565b34801561017657600080fd5b5061017f610386565b6040805195865260208087019590955285810193909352606080860192909252805160808601529283015160a08501529082015160c08401520151151560e082015261010001610135565b6101dd6101d83660046111db565b61041b565b005b3480156101eb57600080fd5b506101dd6107ec565b34801561020057600080fd5b5061012b60035481565b34801561021657600080fd5b506101dd61094b565b34801561022b57600080fd5b506101dd610b00565b34801561024057600080fd5b50600054600160a060020a03165b604051600160a060020a039091168152602001610135565b34801561027257600080fd5b506102a06102813660046111db565b6007602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610135565b3480156102c357600080fd5b506101dd6102d23660046112cc565b610b12565b3480156102e357600080fd5b5061024e6102f2366004611389565b610b28565b6101dd610b52565b34801561030b57600080fd5b5061034461031a3660046111db565b60086020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610135565b34801561037257600080fd5b506101dd6103813660046111db565b610dbb565b6000806000806103b960405180608001604052806000815260200160008152602001600081526020016000151581525090565b50506002805460055460038054600454336000908152600860209081526040918290208251608081018452815481526001820154928101929092529788015491810191909152959092015460ff16151560608601529297919650919450909250565b333b156104455760405160e160020a637a665e8f0281523360048201526024015b60405180910390fd5b61044d610e4b565b600160a060020a0381166000908152600760209081526040918290208251808401909352805460ff161515808452600190910154918301919091526104c9576040517f3c4df43a000000000000000000000000000000000000000000000000000000008152600160a060020a038316600482015260240161043c565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152670de0b6b3a764000090600090600160a060020a0385169063dd62ed3e90604401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d91906113a2565b90508181118015610580575061057e60646105788385610ea7565b90610ebc565b155b6105cf5760405160e560020a62461bcd02815260206004820152601560248201527f496e76616c696420746f6b656e20726571756573740000000000000000000000604482015260640161043c565b6005543481111561064b5760405160e560020a62461bcd02815260206004820152602260248201527f496e73756666696369656e742076616c756520746f207061792073776170206660448201527f6565000000000000000000000000000000000000000000000000000000000000606482015260840161043c565b6000610665633b9aca0061065f8587610ea7565b90610ec8565b90506002548111156106b1576002546040517f02f90ce500000000000000000000000000000000000000000000000000000000815260048101919091526024810182905260440161043c565b6003546106be9083610ed4565b6003556002546106ce9082610ee0565b600255600160a060020a0386166323b872dd336106f3600054600160a060020a031690565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a03928316600482015291166024820152604481018690526064016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906113bb565b6107d15760405160e560020a62461bcd02815260206004820152600660248201527f4661696c65640000000000000000000000000000000000000000000000000000604482015260640161043c565b6107db3382610eec565b50505050506107e960018055565b50565b333b156108115760405160e160020a637a665e8f02815233600482015260240161043c565b336000908152600860205260409020546108705760405160e560020a62461bcd02815260206004820152600e60248201527f4e6f7420612070726f7669646572000000000000000000000000000000000000604482015260640161043c565b610878610e4b565b600354806108cb5760405160e560020a62461bcd02815260206004820181905260248201527f4665652063616e6e6f742062652073706c697420617420746869732074696d65604482015260640161043c565b60006003819055600654906108e08383610ea7565b905060005b8281101561093c57600060068281548110610902576109026113e4565b600091825260209091200154600160a060020a031690508015610929576109298184610eec565b508061093481611416565b9150506108e5565b5050505061094960018055565b565b333b156109705760405160e160020a637a665e8f02815233600482015260240161043c565b336000908152600860205260409020546109cf5760405160e560020a62461bcd02815260206004820152600e60248201527f4e6f7420612070726f7669646572000000000000000000000000000000000000604482015260640161043c565b6109d7610e4b565b336000818152600860208181526040808420815160808082018452825482526001830180548387015260028401805484870190815260038601805460ff8116151560608089019182528a519788018b528d8852878c018e815294519a88019a8b52905115159087019081529c8c5299909852925190945590519055915190559351151560ff199092169190911790556004805491610a748361142f565b90915550508051600254610a8791610ee0565b6002558051604082015160068054600092908110610aa757610aa76113e4565b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055815130311015610aeb575030315b610af53382610eec565b505061094960018055565b610b08611011565b610949600061106e565b610b1a611011565b610b2482826110cb565b5050565b60068181548110610b3857600080fd5b600091825260209091200154600160a060020a0316905081565b333b15610b775760405160e160020a637a665e8f02815233600482015260240161043c565b60003411610bca5760405160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742076616c75650000000000000000000000000000604482015260640161043c565b33600090815260086020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460ff16151560608301819052919290919003610c86575060065460048054906000610c2d83611416565b9091555050600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff191633179055610d01565b6000600160a060020a031660068281548110610ca457610ca46113e4565b600091825260209091200154600160a060020a031603610d01573360068281548110610cd257610cd26113e4565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b604080516080810190915282518190610d1a9034610ed4565b81526020016000846020015111610d315742610d55565b6020840151610d5590610d4f6002610d494284610ee0565b90610ea7565b90610ed4565b815260208082018490526001604092830181905233600090815260088352839020845181559184015190820155908201516002808301919091556060909201516003909101805460ff191691151591909117905554610db49034610ed4565b6002555050565b610dc3611011565b600160a060020a038116610e425760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161043c565b6107e98161106e565b600260015403610ea05760405160e560020a62461bcd02815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043c565b6002600155565b6000610eb3828461145f565b90505b92915050565b6000610eb38284611473565b6000610eb38284611487565b6000610eb3828461149e565b6000610eb382846114b1565b3031811115610f405760405160e560020a62461bcd02815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161043c565b600082600160a060020a03168260405160006040518083038185875af1925050503d8060008114610f8d576040519150601f19603f3d011682016040523d82523d6000602084013e610f92565b606091505b505090508061100c5760405160e560020a62461bcd02815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161043c565b505050565b600054600160a060020a031633146109495760405160e560020a62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043c565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182511461111f5760405160e560020a62461bcd02815260206004820152600f60248201527f4c656e677468206d69736d617463680000000000000000000000000000000000604482015260640161043c565b60005b825181101561100c576040518060400160405280600115158152602001838381518110611151576111516113e4565b602002602001015181525060076000858481518110611172576111726113e4565b602090810291909101810151600160a060020a03168252818101929092526040016000208251815460ff1916901515178155910151600190910155806111b781611416565b915050611122565b8035600160a060020a03811681146111d657600080fd5b919050565b6000602082840312156111ed57600080fd5b610eb3826111bf565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611238576112386111f6565b604052919050565b600067ffffffffffffffff82111561125a5761125a6111f6565b5060209081020190565b600082601f83011261127557600080fd5b8135602061128a61128583611240565b61120f565b828152918102840181019181810190868411156112a657600080fd5b8286015b848110156112c157803583529183019183016112aa565b509695505050505050565b600080604083850312156112df57600080fd5b823567ffffffffffffffff808211156112f757600080fd5b818501915085601f83011261130b57600080fd5b8135602061131b61128583611240565b8281529181028401810191818101908984111561133757600080fd5b948201945b8386101561135c5761134d866111bf565b8252948201949082019061133c565b9650508601359250508082111561137257600080fd5b5061137f85828601611264565b9150509250929050565b60006020828403121561139b57600080fd5b5035919050565b6000602082840312156113b457600080fd5b5051919050565b6000602082840312156113cd57600080fd5b815180151581146113dd57600080fd5b9392505050565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b600060018201611428576114286113fd565b5060010190565b60008161143e5761143e6113fd565b506000190190565b60e060020a634e487b7102600052601260045260246000fd5b60008261146e5761146e611446565b500490565b60008261148257611482611446565b500690565b8082028115828204841417610eb657610eb66113fd565b80820180821115610eb657610eb66113fd565b81810381811115610eb657610eb66113fd56fea264697066735822122022c767e231feee982c045cd3795ec23862da98bab93f30fa6a2910404aa3a89d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity()": {
        "details": "We try to be fair with those that have previous liquidity in the pool by backdating the time liquidity was provided."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity()": {
        "details": " If provider has no liquidity balance left in the pool, their provided time is reset."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "splitFee()": {
        "details": " Anyone can call this function to split fee among the providers."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Swap ERC20 for $CELO Anyone can be become a Celo or cUSD provider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1559,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1561,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "totalFeeReceived",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1563,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "totalProvider",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1565,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "swapfee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1582,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "providersAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1587,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "supportedAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(SupportedAsset)1570_storage)"
      },
      {
        "astId": 1592,
        "contract": "contracts/SwapLab.sol:SwapLab",
        "label": "liqProviders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Provider)1579_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Provider)1579_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SwapLab.Provider)",
        "numberOfBytes": "32",
        "value": "t_struct(Provider)1579_storage"
      },
      "t_mapping(t_address,t_struct(SupportedAsset)1570_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SwapLab.SupportedAsset)",
        "numberOfBytes": "32",
        "value": "t_struct(SupportedAsset)1570_storage"
      },
      "t_struct(Provider)1579_storage": {
        "encoding": "inplace",
        "label": "struct SwapLab.Provider",
        "members": [
          {
            "astId": 1572,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1574,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "timeProvided",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1576,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "position",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1578,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "isExist",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SupportedAsset)1570_storage": {
        "encoding": "inplace",
        "label": "struct SwapLab.SupportedAsset",
        "members": [
          {
            "astId": 1567,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1569,
            "contract": "contracts/SwapLab.sol:SwapLab",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}